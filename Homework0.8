1. Для практикума из занятия 7 продумать, где можно применить замыкания.
Решение:
Замыкание — это комбинация функции и лексического окружения, в котором эта функция была определена. 
Другими словами, замыкание дает вам доступ к Scope (en-US) внешней функции из внутренней функции. 
В JavaScript замыкания создаются каждый раз при создании функции, во время ее создания.
Замыкания можно использовать везде, где обычно используется объект с одним единственным методом.
Такие ситуации повсеместно встречаются в web-разработке. 
Большое количество front-end кода, который мы пишем на JavaScript, основано на обработке событий. 
Мы описываем какое-то поведение, а потом связываем его с событием, которое создается пользователем 
(например, клик мышкой или нажатие клавиши). 
При этом наш код обычно привязывается к событию в виде обратного/ответного вызова (callback): 
callback функция - функция выполняемая в ответ на возникновение события.
В нашем случае это вызов платежной системы магазина.


2. Не выполняя кода, ответить, что выведет браузер и почему:
if (!("a" in window)) {
    var a = 1;
}
alert(a);//undefined, т.к. атрибута «a» в window нет, и ему там неоткуда появится после if


var b = function a(x) {
    x && a(--x);
};
alert(a);//по имени «a» функцию видно только здесь, а т.к. функцию не определили, поэтому выдаст ошибку


function a(x) {
    return x * 2;
}
var a;
alert(a);//var не переинициализирует переменную которая не задана, поэтому выдаст тело функции


function b(x, y, a) {
    arguments[2] = 10;
    alert(a);
}
b(1, 2, 3);//a и arguments[2] — это ссылка на одно и то же значение.


function a() {
    alert(this);
}
a.call(null);//this в глобальной области указывает на window. Вызов call() у функции с параметром null равнозначно вызову call() без аргументов. А без аргументов вызываемая функция не привязывается ни к какому объекту (или привязывается к «объекту по умолчанию» — window), поэтому [object Window]
