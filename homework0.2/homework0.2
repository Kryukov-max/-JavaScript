<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <title>Lesson 2</title>
</head>

<body>
    <script>

        //1. Дан код, почему код даёт именно такие результаты?
        var a = 1, b = 1, c, d;
        c = ++a; alert(c);           // с=2, ++ это инкремент, т.е. увеличение переменной a на 1 => с=a+1=2
        d = b++; alert(d);           // d=1, постфиксная форма d=b++ также увеличивает b с 1 до 2, но возвращает старое значение (которое было до увеличения). Так что alert покажет 1,НО b теперь равно 2.
        c = (2 + ++a); alert(c);      // c=5, а до равенства уже равно 2 (см.1  уравнение), и мы к 2 прибавляем декремент a, т.е. 3, а 2+3=5.
        d = (2 + b++); alert(d);      // d=4, к 2 прибавляется постфиксная форма декремента b, которое мы получили во 2 равенстве, т.е. 4=2+2,НО b теперь равно 3.
        alert(a);                    // a=3, это потому что по условию a=1, мы в 1 и 3 равенстве делали декремент=>a=1+1+1=3
        alert(b);                    // b=3, это потому что по условию b=1, было 2 постфиксных декремента (равенство 2 и 4) уже набежало b=1+1+1=3

    </script>

    <script>


        //2. Чему будет равен x в примере ниже?
        var a = 2;
        var x = 1 + (a *= 2);
        alert(a); //a=4 это присваивание с умножением	a *= 2 тоже самое что	a = a*2=2*2=4

    </script>

    <script>

        /*3. Объявить две целочисленные переменные a и b и задать им произвольные начальные значения. 
        Затем написать скрипт, который работает по следующему принципу:
        если a и b положительные, вывести их разность;
        если а и b отрицательные, вывести их произведение;
        если а и b разных знаков, вывести их сумму; ноль можно считать положительным числом.*/

        var a = prompt("введите число a");//создаем переменную a
        a = parseInt(a);//принимает строку в качестве аргумента и возвращает целое число в соответствии с указанным основанием системы счисления
        var b = prompt("введите число b");//создаем переменную b
        b = parseInt(b);
        var c;//создаем переменную c
        c = parseInt(c);
        if (a > 0 && b > 0) {// если a и b положительные
            c = a - b; //то считаем разность
            alert(c);
        }
        if (a < 0 && b < 0) {//если a и b отрицательные
            c = a * b; //то считаем произведения
            alert(c);
        }

        else { // иначе считем сумму
            c = a + b;
            alert(c);//выводим полученный результат
        }

    </script>

    <script>

        /*4. Присвоить переменной а значение в промежутке[0..15].
        С помощью оператора switch организовать вывод чисел от a до 15.*/
        var a = prompt("введите число a в промежутке[0..15]");//создаем переменную a
        a = parseInt(a);//принимает строку в качестве аргумента и возвращает целое число в соответствии с указанным основанием системы счисления

        var numbers = [];
        for (var i = a - 1; i < 15; i++) { /*(Создаем счетчик), от a  до 15 с инкрементом 1 */
            var b = parseInt(1 + i);//принимает строку в качестве аргумента и возвращает целое число в соответствии с указанным основанием системы счисления

            numbers.push(b)/*добавляет новый элемент b в конец массива*/

        }

        alert(numbers + " массив чисел от a до 15");//функция, которая принимает массив чисел.




    </script>

    <script>

        /*5. Реализовать основные 4 арифметические операции в виде функций с двумя параметрами.
        Обязательно использовать оператор return.*/


        function summ(x, y) {
            return x + y;
        }
        var test1 = summ(4, 2);
        alert(test1);

        function difference(x, y) {
            return x - y;
        }
        var test2 = difference(4, 2);
        alert(test2);

        function composition(x, y) {
            return x * y;
        }
        var test3 = composition(4, 2);
        alert(test3);

        function fraction(x, y) {
            return x / y;
        }
        var test4 = fraction(4, 2);
        alert(test4);

    </script>


    <script>

        /*6. Реализовать функцию с тремя параметрами:
               function mathOperation(arg1, arg2, operation),
               где arg1, arg2 – значения аргументов,
               operation – строка с названием операции.
               В зависимости от переданного значения операции
               выполнить одну из арифметических операций(использовать функции из пункта 5)
               и вернуть полученное значение(использовать switch).*/


        let sum = new Function('a', 'b', 'return a + b');
        alert(sum(1, 2));

        let dif = new Function('a', 'b', 'return a - b');
        alert(dif(4, 2));

        let com = new Function('a', 'b', 'return a * b');
        alert(com(3, 6));

        let frac = new Function('a', 'b', 'return a / b');
        alert(frac(4, 2));

    </script>




    <script>

        //7. '*' Сравнить null и 0. Попробуйте объяснить результат.
        null это отсутствие значения и способ обозначить то, чего не существует, а 0 это конкретное число.

    </script>
    <script>
        /*8. '*' С помощью рекурсии организовать функцию возведения числа в степень.Формат:
        function power(val, pow), где val – заданное число, pow – степень.*/

        function power(val, pow) {
            if (pow != 1) { // пока pow != 1, сводить вычисление power(val,pow) к power(val,pow-1)
                return val * power(val, pow - 1);
            } else {
                return val;
            }
            alert(power(2, 3)); // 8




            function power(val, pow) {
                var result = val;
                for (var i = 1; i < pow; i++) {
                    result *= val;
                }
                return result;
            }
            var val = prompt("val?", '');
            var pow = prompt("pow?", '');
            if (pow <= 1) {
                alert('Степень ' + pow +
                    'не поддерживается, введите целую степень, большую 1'
                );
            } else {
                alert(power(val, pow));
            }




    </script>
</body>

</html>
